from flask import Flask, request, send_from_directory, jsonify
from flask_cors import CORS
import smtplib
import os
from datetime import datetime
import json
import base64
import zipfile
import io
import time
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders

app = Flask(__name__)
CORS(app)

# Configuration Email pour ZeenDoc - Multi-secteurs
EMAIL_DESTINATAIRE = os.environ.get('EMAIL_DESTINATAIRE', 'eloise.csmt@gmail.com')

# Adresses ZeenDoc par secteur
ZEENDOC_EMAIL_LEHAVRE = os.environ.get('ZEENDOC_EMAIL_LEHAVRE', 'depot_docusign.optia_finance@zeenmail.com')
ZEENDOC_EMAIL_ROUEN = os.environ.get('ZEENDOC_EMAIL_ROUEN', 'depot_docusign.optia_finance@zeenmail.com')
ZEENDOC_EMAIL_PARIS = os.environ.get('ZEENDOC_EMAIL_PARIS', 'depot_docusign.agenc_paris.optia_finance@zeenmail.com')

# Mapping secteur -> adresse ZeenDoc
ZEENDOC_EMAILS = {
    'Le Havre': ZEENDOC_EMAIL_LEHAVRE,
    'Rouen': ZEENDOC_EMAIL_ROUEN,
    'Paris': ZEENDOC_EMAIL_PARIS
}

# Configuration SMTP (maintenant obligatoire)
SMTP_SERVER = os.environ.get('SMTP_SERVER', '')
SMTP_PORT = int(os.environ.get('SMTP_PORT', '587'))
SMTP_USERNAME = os.environ.get('SMTP_USERNAME', '')
SMTP_PASSWORD = os.environ.get('SMTP_PASSWORD', '')

# Configuration pour la gestion des fichiers lourds
LIMITE_EMAIL_MB = int(os.environ.get('LIMITE_EMAIL_MB', '20'))
DELAI_ENTRE_ENVOIS = int(os.environ.get('DELAI_ENTRE_ENVOIS', '30'))
MAX_EMAILS_PAR_DEMANDE = int(os.environ.get('MAX_EMAILS_PAR_DEMANDE', '5'))

def obtenir_adresse_zeendoc(secteur_conseiller):
    """Retourne l'adresse ZeenDoc appropri√©e selon le secteur du conseiller"""
    
    adresse = ZEENDOC_EMAILS.get(secteur_conseiller)
    if not adresse:
        print(f"‚ö†Ô∏è  Secteur '{secteur_conseiller}' non reconnu, utilisation adresse par d√©faut")
        return ZEENDOC_EMAIL_ROUEN  # Adresse par d√©faut
    
    print(f"üìß Secteur '{secteur_conseiller}' ‚Üí {adresse}")
    return adresse

# Servir les fichiers statiques (HTML, CSS)
@app.route('/')
def index():
    return send_from_directory('.', 'index.html')

@app.route('/styles.css')
def css():
    return send_from_directory('.', 'styles.css')

# Route pour les demandes de gestion (original)
@app.route('/envoyer-demande', methods=['POST'])
def envoyer_demande():
    try:
        # V√©rification de la configuration SMTP
        if not all([SMTP_SERVER, SMTP_USERNAME, SMTP_PASSWORD]):
            return jsonify({
                "status": "error", 
                "message": "Configuration SMTP incompl√®te. Veuillez configurer SMTP_SERVER, SMTP_USERNAME et SMTP_PASSWORD."
            }), 500
        
        # R√©cup√©rer les donn√©es du formulaire
        data = request.form.to_dict()
        files = request.files
        
        # R√©cup√©rer le secteur pour d√©terminer l'adresse ZeenDoc
        secteur_demandeur = data.get('secteurDemandeur', '')
        if not secteur_demandeur:
            return jsonify({
                "status": "error", 
                "message": "Le secteur du demandeur est obligatoire pour d√©terminer l'adresse de d√©p√¥t ZeenDoc."
            }), 400
        
        adresse_zeendoc = obtenir_adresse_zeendoc(secteur_demandeur)
        
        # Construire le sujet
        type_demande = data.get('type', 'Demande')
        nom = data.get('nom', '')
        prenom = data.get('prenom', '')
        date_demande = data.get('dateDemande', datetime.now().strftime('%d/%m/%Y'))
        
        sujet_principal = f"Demande {type_demande.title()} - {nom} {prenom} - {date_demande}"
        sujet_zeendoc = f"[ZEENDOC-{secteur_demandeur.upper()}] Documents - {nom} {prenom} - {type_demande.title()}"
        
        # Construire le corps du mail principal
        corps_principal = generer_corps_email(data, adresse_zeendoc)
        
        # Pr√©parer les fichiers pour ZeenDoc
        fichiers_pieces = []
        if files and any(file.filename for file in files.values() if file):
            fichiers_pieces = preparer_fichiers_zeendoc(files, nom, prenom, type_demande)
        
        # Envoi automatique des deux emails
        envoi_auto_reussi = False
        resultats_detailles = {}
        
        try:
            print(f"üìß D√©but des envois automatiques pour secteur: {secteur_demandeur}")
            print(f"üìß Adresse ZeenDoc: {adresse_zeendoc}")
            
            # 1. Email PRINCIPAL avec ZIP si n√©cessaire
            print("üìß Envoi email principal...")
            envoi_principal = envoyer_email_principal_auto(
                sujet_principal, 
                corps_principal, 
                fichiers_pieces,
                data
            )
            
            # 2. Emails ZEENDOC multiples avec fichiers originaux
            print(f"üìÅ Envoi vers ZeenDoc ({secteur_demandeur})...")
            resultats_zeendoc = []
            if fichiers_pieces:
                corps_zeendoc = generer_corps_zeendoc(data, fichiers_pieces, adresse_zeendoc)
                resultats_zeendoc = envoyer_emails_zeendoc_multiples(
                    sujet_zeendoc, 
                    corps_zeendoc, 
                    fichiers_pieces,
                    adresse_zeendoc  # Nouvelle adresse selon secteur
                )
            
            # V√©rification globale
            zeendoc_reussi = all(r.get('succes', False) for r in resultats_zeendoc) if resultats_zeendoc else True
            envoi_auto_reussi = envoi_principal and zeendoc_reussi
            
            resultats_detailles = {
                'email_principal': envoi_principal,
                'zeendoc_parties': resultats_zeendoc,
                'zeendoc_reussi': zeendoc_reussi,
                'total_emails_zeendoc': len(resultats_zeendoc),
                'secteur': secteur_demandeur,
                'adresse_zeendoc': adresse_zeendoc
            }
            
            print(f"‚úÖ Envois termin√©s - Principal: {envoi_principal}, ZeenDoc ({secteur_demandeur}): {zeendoc_reussi}")
            
        except Exception as e:
            print(f"‚ùå Erreur envoi automatique: {str(e)}")
            return jsonify({
                "status": "error", 
                "message": f"Erreur lors de l'envoi automatique: {str(e)}"
            }), 500
        
        return jsonify({
            "status": "success", 
            "message": "Demande envoy√©e avec succ√®s!",
            "fichiers_count": len(fichiers_pieces),
            "envoi_auto": envoi_auto_reussi,
            "details_envoi": resultats_detailles,
            "fichiers_info": [f["nom"] for f in fichiers_pieces],
            "secteur": secteur_demandeur,
            "adresse_zeendoc": adresse_zeendoc
        })
        
    except Exception as e:
        print(f"Erreur g√©n√©rale: {str(e)}")
        return jsonify({"status": "error", "message": f"Erreur lors du traitement: {str(e)}"}), 500

# Route pour les demandes d'ing√©nierie (avec multi-secteurs)
@app.route('/envoyer-demande-ingenierie', methods=['POST'])
def envoyer_demande_ingenierie():
    try:
        print("=== DEBUGGING BACKEND D√âTAILL√â ===")
        
        # Debug 1: V√©rifier la requ√™te compl√®te
        print(f"üì• Content-Type: {request.content_type}")
        print(f"üì• Content-Length: {request.content_length}")
        print(f"üì• Method: {request.method}")
        
        # Debug 2: Lister toutes les donn√©es re√ßues
        print(f"üìã Form keys: {list(request.form.keys())}")
        print(f"üìã Form values sample: {dict(list(request.form.items())[:5])}")
        
        # Debug 3: Analyser request.files EN D√âTAIL
        print(f"üìé Files keys: {list(request.files.keys())}")
        print(f"üìé Files type: {type(request.files)}")
        
        # Debug 4: Examiner chaque fichier individuellement
        total_files_received = 0
        for key in request.files.keys():
            files_list = request.files.getlist(key)  # CORRECTION: Utiliser getlist()
            print(f"üìÅ Key '{key}': {len(files_list)} fichier(s)")
            
            for i, file in enumerate(files_list):
                if file and file.filename and file.filename.strip():  # AJOUT: V√©rifier nom non vide
                    total_files_received += 1
                    print(f"  - Fichier {i+1}: {file.filename} (stream disponible)")
                else:
                    print(f"  - Fichier {i+1}: VIDE ou sans nom")
        
        print(f"üìä Total fichiers valides re√ßus: {total_files_received}")
        
        # V√©rification de la configuration SMTP
        if not all([SMTP_SERVER, SMTP_USERNAME, SMTP_PASSWORD]):
            return jsonify({
                "status": "error", 
                "message": "Configuration SMTP incompl√®te. Veuillez configurer SMTP_SERVER, SMTP_USERNAME et SMTP_PASSWORD."
            }), 500
        
        # R√©cup√©rer les donn√©es du formulaire
        data = request.form.to_dict()
        files = request.files  # Utiliser request.files directement
        
        # R√©cup√©rer le secteur pour d√©terminer l'adresse ZeenDoc
        secteur_conseiller = data.get('secteurConseiller', '')
        if not secteur_conseiller:
            return jsonify({
                "status": "error", 
                "message": "Le secteur du conseiller est obligatoire pour d√©terminer l'adresse de d√©p√¥t ZeenDoc."
            }), 400
        
        # CORRECTION: V√©rifier si l'envoi vers ZeenDoc est activ√©
        envoyer_vers_zeendoc_str = data.get('envoyerVersZeendoc', 'false')
        envoyer_vers_zeendoc = envoyer_vers_zeendoc_str.lower() == 'true'
        
        print(f"üìÅ Param√®tre envoyerVersZeendoc re√ßu: '{envoyer_vers_zeendoc_str}'")
        print(f"üìÅ ZeenDoc activ√© (apr√®s conversion): {envoyer_vers_zeendoc}")
        
        adresse_zeendoc = obtenir_adresse_zeendoc(secteur_conseiller) if envoyer_vers_zeendoc else None
        
        if envoyer_vers_zeendoc:
            print(f"üìß Adresse ZeenDoc: {adresse_zeendoc}")
        else:
            print("üìß ZeenDoc d√©sactiv√© par l'utilisateur")
        
        # Construire les sujets
        nom_conseiller = data.get('nomConseiller', 'Conseiller')
        contact1_nom = data.get('nomContact1', '')
        contact1_prenom = data.get('prenomContact1', '')
        contact2_nom = data.get('nomContact2', '')
        contact2_prenom = data.get('prenomContact2', '')
        date_demande = data.get('dateDemande', datetime.now().strftime('%d/%m/%Y'))
        
        # Construire le nom du client
        client_principal = f"{contact1_nom} {contact1_prenom}"
        if contact2_nom and contact2_prenom:
            client_principal += f" & {contact2_nom} {contact2_prenom}"
        
        sujet_principal = f"Demande Ing√©nierie - {client_principal} - {nom_conseiller} - {date_demande}"
        sujet_zeendoc = f"[ZEENDOC-{secteur_conseiller.upper()}] Ing√©nierie - {client_principal} - {nom_conseiller}"
        
        print(f"üìß Sujet principal: {sujet_principal}")
        if envoyer_vers_zeendoc:
            print(f"üìß Sujet ZeenDoc: {sujet_zeendoc}")
        
        # Construire le corps du mail principal
        corps_principal = generer_corps_email_ingenierie(data, adresse_zeendoc if envoyer_vers_zeendoc else None)
        
        # Pr√©parer les fichiers
        fichiers_pieces = []
        if total_files_received > 0:
            if envoyer_vers_zeendoc:
                print("üîÑ Pr√©paration fichiers pour ZeenDoc...")
                fichiers_pieces = preparer_fichiers_zeendoc_ingenierie(files, contact1_nom, contact1_prenom, nom_conseiller, secteur_conseiller)
            else:
                print("üîÑ Pr√©paration fichiers pour email principal uniquement...")
                fichiers_pieces = preparer_fichiers_email_principal(files)
        else:
            print("üìÅ Aucun fichier √† traiter")
        
        print(f"üìä Fichiers pr√©par√©s: {len(fichiers_pieces)}")
        
        # Envoi automatique des emails
        envoi_auto_reussi = False
        resultats_detailles = {}
        
        try:
            print(f"üìß D√©but des envois automatiques d'ing√©nierie pour secteur: {secteur_conseiller}")
            
            # 1. Email PRINCIPAL avec ZIP si n√©cessaire
            print("üìß Envoi email principal...")
            envoi_principal = envoyer_email_principal_auto(
                sujet_principal, 
                corps_principal, 
                fichiers_pieces,
                data,
                type_demande="ingenierie"
            )
            
            # 2. Emails ZEENDOC multiples avec fichiers originaux (seulement si activ√©)
            resultats_zeendoc = []
            if envoyer_vers_zeendoc and fichiers_pieces:
                print(f"üìÅ Envoi vers ZeenDoc ({secteur_conseiller})...")
                corps_zeendoc = generer_corps_zeendoc_ingenierie(data, fichiers_pieces, adresse_zeendoc)
                resultats_zeendoc = envoyer_emails_zeendoc_multiples(
                    sujet_zeendoc, 
                    corps_zeendoc, 
                    fichiers_pieces,
                    adresse_zeendoc
                )
            elif envoyer_vers_zeendoc:
                print("‚ö†Ô∏è ZeenDoc activ√© mais aucun fichier √† envoyer")
            else:
                print("‚ö†Ô∏è ZeenDoc d√©sactiv√© par l'utilisateur")
            
            # V√©rification globale
            zeendoc_reussi = all(r.get('succes', False) for r in resultats_zeendoc) if resultats_zeendoc else True
            envoi_auto_reussi = envoi_principal and zeendoc_reussi
            
            resultats_detailles = {
                'email_principal': envoi_principal,
                'zeendoc_parties': resultats_zeendoc,
                'zeendoc_reussi': zeendoc_reussi,
                'zeendoc_active': envoyer_vers_zeendoc,
                'total_emails_zeendoc': len(resultats_zeendoc),
                'secteur': secteur_conseiller,
                'adresse_zeendoc': adresse_zeendoc
            }
            
            status_zeendoc = "activ√©" if envoyer_vers_zeendoc else "d√©sactiv√©"
            print(f"‚úÖ Envois ing√©nierie termin√©s - Principal: {envoi_principal}, ZeenDoc ({secteur_conseiller}): {zeendoc_reussi if envoyer_vers_zeendoc else status_zeendoc}")
            
        except Exception as e:
            print(f"‚ùå Erreur envoi automatique ing√©nierie: {str(e)}")
            import traceback
            print(f"üîç Traceback: {traceback.format_exc()}")
            return jsonify({
                "status": "error", 
                "message": f"Erreur lors de l'envoi automatique: {str(e)}"
            }), 500
        
        return jsonify({
            "status": "success", 
            "message": "Demande d'ing√©nierie envoy√©e avec succ√®s!",
            "fichiers_count": len(fichiers_pieces),
            "envoi_auto": envoi_auto_reussi,
            "details_envoi": resultats_detailles,
            "fichiers_info": [f["nom"] for f in fichiers_pieces],
            "secteur": secteur_conseiller,
            "adresse_zeendoc": adresse_zeendoc,
            "zeendoc_active": envoyer_vers_zeendoc
        })
        
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©rale ing√©nierie: {str(e)}")
        import traceback
        print(f"üîç Traceback: {traceback.format_exc()}")
        return jsonify({"status": "error", "message": f"Erreur lors du traitement: {str(e)}"}), 500
        

def envoyer_email_principal_auto(sujet, corps, fichiers_pieces, data, type_demande="standard"):
    """Email principal avec compression ZIP si trop lourd"""
    
    try:
        if not fichiers_pieces:
            # Pas de fichiers, envoi simple
            return envoyer_email_smtp(
                destinataire=EMAIL_DESTINATAIRE,
                sujet=sujet,
                corps=corps,
                fichiers=[]
            )
        
        # Calculer la taille totale
        taille_totale = sum(f['taille'] for f in fichiers_pieces)
        limite_bytes = LIMITE_EMAIL_MB * 1024 * 1024
        
        # D√©cider si on compresse
        if taille_totale > limite_bytes:
            print(f"üì¶ Compression ZIP n√©cessaire: {format_file_size(taille_totale)} > {LIMITE_EMAIL_MB}MB")
            fichiers_a_envoyer = creer_archive_zip(fichiers_pieces, data, type_demande)
            corps_modifie = corps + f"""

=== PI√àCES JOINTES ===
üì¶ Fichiers compress√©s en archive ZIP (taille originale: {format_file_size(taille_totale)})
üìÑ {len(fichiers_pieces)} document(s) dans l'archive
üíæ Taille compress√©e: {format_file_size(fichiers_a_envoyer[0]['taille'])}

‚ÑπÔ∏è  Les documents originaux sont envoy√©s s√©par√©ment vers ZeenDoc pour traitement.
"""
        else:
            print(f"üìÑ Envoi fichiers originaux: {format_file_size(taille_totale)} < {LIMITE_EMAIL_MB}MB")
            fichiers_a_envoyer = fichiers_pieces
            corps_modifie = corps
        
        return envoyer_email_smtp(
            destinataire=EMAIL_DESTINATAIRE,
            sujet=sujet,
            corps=corps_modifie,
            fichiers=fichiers_a_envoyer
        )
        
    except Exception as e:
        print(f"‚ùå Erreur envoi email principal: {str(e)}")
        return False

def creer_archive_zip(fichiers_pieces, data, type_demande="standard"):
    """Cr√©e une archive ZIP avec tous les fichiers"""
    
    try:
        zip_buffer = io.BytesIO()
        
        with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED, compresslevel=6) as zip_file:
            for fichier in fichiers_pieces:
                # Organiser par cat√©gorie dans le ZIP
                chemin_dans_zip = f"{fichier['categorie']}/{fichier['nom']}"
                zip_file.writestr(chemin_dans_zip, fichier['contenu'])
        
        zip_buffer.seek(0)
        contenu_zip = zip_buffer.getvalue()
        
        # G√©n√©rer nom du ZIP selon le type
        if type_demande == "ingenierie":
            nom_conseiller = data.get('nomConseiller', 'Conseiller').replace(' ', '_')
            secteur_conseiller = data.get('secteurConseiller', 'Secteur').replace(' ', '_')
            contact1_nom = data.get('nomContact1', 'Client')
            contact1_prenom = data.get('prenomContact1', '')
            nom_zip = f"Documents_INGENIERIE_{contact1_nom.upper()}_{contact1_prenom}_{nom_conseiller}_{secteur_conseiller}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.zip"
        else:
            nom = data.get('nom', 'Client')
            prenom = data.get('prenom', '')
            type_demande_clean = data.get('type', 'Demande')
            secteur = data.get('secteurDemandeur', 'Secteur').replace(' ', '_')
            nom_zip = f"Documents_{type_demande_clean.upper()}_{nom.upper()}_{prenom}_{secteur}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.zip"
        
        print(f"üì¶ Archive ZIP cr√©√©e: {nom_zip} ({format_file_size(len(contenu_zip))})")
        
        return [{
            'nom': nom_zip,
            'contenu': contenu_zip,
            'type_mime': 'application/zip',
            'taille': len(contenu_zip),
            'categorie': 'Archive compl√®te'
        }]
        
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation ZIP: {str(e)}")
        return fichiers_pieces  # Retourner les fichiers originaux en cas d'erreur

def diviser_fichiers_par_taille(fichiers_pieces, limite_mb=None):
    """Divise les fichiers en plusieurs groupes selon la taille"""
    
    if limite_mb is None:
        limite_mb = LIMITE_EMAIL_MB
    
    limite_bytes = limite_mb * 1024 * 1024
    groupes = []
    groupe_actuel = []
    taille_actuelle = 0
    
    for fichier in fichiers_pieces:
        taille_fichier = fichier['taille']
        
        # Si le fichier seul d√©passe la limite
        if taille_fichier > limite_bytes:
            # Envoyer le groupe actuel s'il n'est pas vide
            if groupe_actuel:
                groupes.append(groupe_actuel)
                groupe_actuel = []
                taille_actuelle = 0
            
            # Fichier seul dans son propre groupe
            groupes.append([fichier])
            print(f"‚ö†Ô∏è  Fichier volumineux isol√©: {fichier['nom']} ({format_file_size(taille_fichier)})")
            continue
        
        # Si ajouter ce fichier d√©passe la limite
        if taille_actuelle + taille_fichier > limite_bytes:
            # Finaliser le groupe actuel
            if groupe_actuel:
                groupes.append(groupe_actuel)
            
            # Commencer un nouveau groupe
            groupe_actuel = [fichier]
            taille_actuelle = taille_fichier
        else:
            # Ajouter au groupe actuel
            groupe_actuel.append(fichier)
            taille_actuelle += taille_fichier
    
    # Ajouter le dernier groupe
    if groupe_actuel:
        groupes.append(groupe_actuel)
    
    return groupes

def envoyer_emails_zeendoc_multiples(sujet_base, corps_base, fichiers_pieces, adresse_zeendoc):
    """ZeenDoc: Emails multiples pour pr√©server la qualit√©"""
    
    if not fichiers_pieces:
        return []
    
    groupes_fichiers = diviser_fichiers_par_taille(fichiers_pieces)
    total_groupes = len(groupes_fichiers)
    
    if total_groupes > MAX_EMAILS_PAR_DEMANDE:
        print(f"‚ö†Ô∏è  Trop de groupes ({total_groupes}), limit√© √† {MAX_EMAILS_PAR_DEMANDE}")
        groupes_fichiers = groupes_fichiers[:MAX_EMAILS_PAR_DEMANDE]
        total_groupes = len(groupes_fichiers)
    
    print(f"üìß Division ZeenDoc: {len(fichiers_pieces)} fichiers ‚Üí {total_groupes} email(s) vers {adresse_zeendoc}")
    
    resultats = []
    
    for index, groupe in enumerate(groupes_fichiers, 1):
        try:
            # Sujet avec num√©rotation
            if total_groupes > 1:
                sujet_numerote = f"{sujet_base} - Partie {index}/{total_groupes}"
            else:
                sujet_numerote = sujet_base
            
            # Corps adapt√© pour ZeenDoc
            corps_numerote = generer_corps_zeendoc_multiple(
                corps_base, groupe, index, total_groupes, fichiers_pieces
            )
            
            taille_groupe = sum(f['taille'] for f in groupe)
            print(f"üì§ Envoi partie {index}/{total_groupes} vers {adresse_zeendoc}: {len(groupe)} fichier(s) ({format_file_size(taille_groupe)})")
            
            # Envoi vers ZeenDoc avec adresse sp√©cifique au secteur
            succes = envoyer_email_smtp(
                destinataire=adresse_zeendoc,  # Adresse sp√©cifique au secteur
                cc=EMAIL_DESTINATAIRE,  # Copie pour suivi
                sujet=sujet_numerote,
                corps=corps_numerote,
                fichiers=groupe
            )
            
            resultats.append({
                'partie': f"{index}/{total_groupes}",
                'fichiers_count': len(groupe),
                'succes': succes,
                'taille_totale': taille_groupe,
                'fichiers': [f['nom'] for f in groupe],
                'adresse_zeendoc': adresse_zeendoc
            })
            
            if succes:
                print(f"‚úÖ Partie {index}/{total_groupes} envoy√©e avec succ√®s vers {adresse_zeendoc}")
            else:
                print(f"‚ùå √âchec envoi partie {index}/{total_groupes} vers {adresse_zeendoc}")
            
            # D√©lai entre envois (sauf dernier)
            if index < total_groupes and succes:
                print(f"‚è±Ô∏è  Attente {DELAI_ENTRE_ENVOIS}s avant envoi suivant...")
                time.sleep(DELAI_ENTRE_ENVOIS)
                
        except Exception as e:
            print(f"‚ùå Erreur envoi partie {index}/{total_groupes}: {str(e)}")
            resultats.append({
                'partie': f"{index}/{total_groupes}",
                'succes': False,
                'erreur': str(e),
                'adresse_zeendoc': adresse_zeendoc
            })
    
    return resultats

def envoyer_email_smtp(destinataire, sujet, corps, fichiers, cc=None):
    """Fonction SMTP g√©n√©rique pour tous les envois"""
    
    try:
        msg = MIMEMultipart()
        msg['From'] = SMTP_USERNAME
        msg['To'] = destinataire
        if cc:
            msg['Cc'] = cc
        msg['Subject'] = sujet
        
        # Corps du message
        msg.attach(MIMEText(corps, 'plain', 'utf-8'))
        
        # Pi√®ces jointes
        for fichier in fichiers:
            part = MIMEBase('application', 'octet-stream')
            part.set_payload(fichier['contenu'])
            encoders.encode_base64(part)
            part.add_header(
                'Content-Disposition',
                f'attachment; filename="{fichier["nom"]}"'
            )
            msg.attach(part)
        
        # Envoi SMTP
        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()
            server.login(SMTP_USERNAME, SMTP_PASSWORD)
            
            destinataires = [destinataire]
            if cc:
                destinataires.append(cc)
            
            server.send_message(msg, to_addrs=destinataires)
            return True
            
    except Exception as e:
        print(f"‚ùå Erreur SMTP: {str(e)}")
        return False

def generer_corps_zeendoc_multiple(corps_base, fichiers_groupe, index, total, fichiers_complets):
    """G√©n√®re le corps pour un email multiple"""
    
    if total == 1:
        return corps_base
    
    # En-t√™te sp√©cial pour les envois multiples
    entete_multiple = f"""=== ENVOI MULTIPLE - PARTIE {index}/{total} ===
‚ö†Ô∏è  ATTENTION: Cet envoi fait partie d'un lot de {total} emails
üì¶ Cette partie contient {len(fichiers_groupe)} document(s) sur {len(fichiers_complets)} au total
‚è±Ô∏è  D√©lai entre envois: {DELAI_ENTRE_ENVOIS} secondes pour √©viter la saturation

"""
    
    # Ajouter la liste des fichiers de cette partie
    fichiers_section = "=== FICHIERS DE CETTE PARTIE ===\n"
    
    par_categorie = {}
    for fichier in fichiers_groupe:
        cat = fichier['categorie']
        if cat not in par_categorie:
            par_categorie[cat] = []
        par_categorie[cat].append(fichier)
    
    for categorie, fichiers in par_categorie.items():
        fichiers_section += f"\nüìÅ {categorie.upper()}:\n"
        for fichier in fichiers:
            taille_fmt = format_file_size(fichier['taille'])
            fichiers_section += f"  ‚Ä¢ {fichier['nom']} ({taille_fmt})\n"
    
    # Informations sur l'envoi complet
    recap_section = f"""

=== R√âCAPITULATIF COMPLET ===
Total des documents: {len(fichiers_complets)}
Nombre d'emails: {total}
Partie actuelle: {index}/{total}
"""
    
    return entete_multiple + fichiers_section + recap_section + "\n" + corps_base

# ===== FONCTIONS POUR LES DEMANDES STANDARD (avec multi-secteurs) =====

def preparer_fichiers_zeendoc_ingenierie(files, nom, prenom, conseiller, secteur):
    """Pr√©pare les fichiers pour l'envoi vers ZeenDoc - version ing√©nierie CORRIG√âE"""
    
    fichiers_pieces = []
    
    print(f"üîß Pr√©paration fichiers ing√©nierie pour: {nom} {prenom}, conseiller: {conseiller}, secteur: {secteur}")
    
    # CORRECTION MAJEURE: Utiliser request.files.items() au lieu de files.items()
    # Et traiter chaque cl√© comme pouvant avoir plusieurs fichiers
    for key in files.keys():
        files_list = files.getlist(key)  # Obtenir tous les fichiers pour cette cl√©
        print(f"üìÅ Traitement cl√© '{key}': {len(files_list)} fichier(s)")
        
        for file in files_list:
            if file and file.filename and file.filename.strip():  # AJOUT: V√©rifier que le nom n'est pas vide
                try:
                    print(f"  üìÑ Traitement fichier: {file.filename}")
                    
                    # Lire le contenu du fichier
                    file_content = file.read()
                    file.seek(0)  # Remettre le curseur au d√©but
                    
                    if len(file_content) == 0:  # AJOUT: V√©rifier que le fichier n'est pas vide
                        print(f"  ‚ö†Ô∏è Fichier vide ignor√©: {file.filename}")
                        continue
                    
                    print(f"  üìä Taille lue: {len(file_content)} bytes")
                    
                    # G√©n√©rer un nom de fichier standardis√© pour ing√©nierie
                    nom_standardise = generer_nom_fichier_zeendoc_ingenierie(
                        file.filename, 
                        nom, 
                        prenom, 
                        conseiller,
                        secteur,
                        key
                    )
                    
                    print(f"  üè∑Ô∏è Nom standardis√©: {nom_standardise}")
                    
                    fichier_data = {
                        'nom': nom_standardise,
                        'nom_original': file.filename,
                        'contenu': file_content,
                        'type_mime': file.content_type or 'application/octet-stream',
                        'taille': len(file_content),
                        'categorie': obtenir_categorie_document_ingenierie(key)
                    }
                    
                    fichiers_pieces.append(fichier_data)
                    print(f"  ‚úÖ Fichier ajout√©: {nom_standardise} ({len(file_content)} bytes)")
                    
                except Exception as e:
                    print(f"  ‚ùå Erreur pr√©paration fichier {file.filename}: {str(e)}")
                    import traceback
                    print(f"  üîç Traceback: {traceback.format_exc()}")
                    continue
            else:
                print(f"  ‚ö†Ô∏è Fichier vide ou sans nom pour la cl√© '{key}'")
    
    print(f"üìä Total fichiers pr√©par√©s: {len(fichiers_pieces)}")
    for i, f in enumerate(fichiers_pieces):
        print(f"  {i+1}. {f['nom']} ({f['taille']} bytes, cat√©gorie: {f['categorie']})")
    
    return fichiers_pieces

def generer_nom_fichier_zeendoc(nom_fichier, nom, prenom, type_demande, doc_id):
    """G√©n√®re un nom de fichier standardis√© pour ZeenDoc - demandes standard"""
    
    # Extraire l'extension
    extension = ""
    if '.' in nom_fichier:
        extension = nom_fichier.split('.')[-1].lower()
    
    # Mapper les IDs de documents vers des noms courts
    mapping_docs = {
        'majProfil_doc': 'MAJ_Profil',
        'etudeSignee_doc': 'Etude_Signee',
        'cniValide_doc': 'CNI',
        'justifDom_doc': 'Justif_Domicile',
        'ribJour_doc': 'RIB',
        'justifProvenance_doc': 'Justif_Provenance',
        'justifDomImpot_doc': 'Justif_Dom_Impot',
        'clauseBeneficiaire_doc': 'Clause_Beneficiaire',
        'majProfilRachat_doc': 'MAJ_Profil',
        'ribJourRachat_doc': 'RIB',
        'majProfilArbitrage_doc': 'MAJ_Profil',
        'ficheRenseignement_doc': 'Fiche_Renseignement',
        'profilClientSigne_doc': 'Profil_Client',
        'cartoClientSigne_doc': 'Cartographie',
        'lettreMiseRelation_doc': 'Lettre_Relation',
        'filSigne_doc': 'FIL',
        'justifDomCreation_doc': 'Justif_Domicile',
        'cniValideCreation_doc': 'CNI'
    }
    
    doc_type = mapping_docs.get(doc_id, 'Document')
    
    # Format: TYPE_DEMANDE_NOM_Prenom_TypeDocument_YYYYMMDD.ext
    date_str = datetime.now().strftime('%Y%m%d')
    nom_final = f"{type_demande.upper()}_{nom.upper()}_{prenom}_{doc_type}_{date_str}"
    
    if extension:
        nom_final += f".{extension}"
    
    return nom_final

def obtenir_categorie_document(doc_id):
    """Retourne la cat√©gorie du document pour ZeenDoc - demandes standard"""
    
    categories = {
        'majProfil_doc': 'Profil Client',
        'etudeSignee_doc': 'Etudes',
        'cniValide_doc': 'Identit√©',
        'justifDom_doc': 'Justificatifs',
        'ribJour_doc': 'Bancaire',
        'justifProvenance_doc': 'Justificatifs',
        'justifDomImpot_doc': 'Justificatifs',
        'clauseBeneficiaire_doc': 'B√©n√©ficiaires',
        'majProfilRachat_doc': 'Profil Client',
        'ribJourRachat_doc': 'Bancaire',
        'majProfilArbitrage_doc': 'Profil Client',
        'ficheRenseignement_doc': 'Profil Client',
        'profilClientSigne_doc': 'Profil Client',
        'cartoClientSigne_doc': 'Cartographie',
        'lettreMiseRelation_doc': 'Relation Client',
        'filSigne_doc': 'Documents L√©gaux',
        'justifDomCreation_doc': 'Justificatifs',
        'cniValideCreation_doc': 'Identit√©'
    }
    
    return categories.get(doc_id, 'G√©n√©ral')

def generer_corps_zeendoc(data, fichiers_pieces, adresse_zeendoc):
    """G√©n√®re le corps de l'email pour ZeenDoc - demandes standard"""
    
    type_demande = data.get('type', 'Non sp√©cifi√©').upper()
    nom = data.get('nom', '')
    prenom = data.get('prenom', '')
    date_demande = data.get('dateDemande', datetime.now().strftime('%d/%m/%Y'))
    secteur = data.get('secteurDemandeur', 'Non sp√©cifi√©')
    
    corps = f"""=== D√âP√îT AUTOMATIQUE ZEENDOC ===
Type de demande: {type_demande}
Client: {nom} {prenom}
Date: {date_demande}
Secteur: {secteur}
Adresse de d√©p√¥t: {adresse_zeendoc}
Nombre de pi√®ces: {len(fichiers_pieces)}

=== CLASSIFICATION DES DOCUMENTS ===
"""

    # Grouper par cat√©gorie
    par_categorie = {}
    for fichier in fichiers_pieces:
        cat = fichier['categorie']
        if cat not in par_categorie:
            par_categorie[cat] = []
        par_categorie[cat].append(fichier)
    
    for categorie, fichiers in par_categorie.items():
        corps += f"\nüìÅ {categorie.upper()}:\n"
        for fichier in fichiers:
            taille_fmt = format_file_size(fichier['taille'])
            corps += f"  ‚Ä¢ {fichier['nom']} ({taille_fmt})\n"
    
    corps += f"""

=== INFORMATIONS TECHNIQUES ===
Format de nommage: TYPE_NOM_Prenom_TypeDoc_YYYYMMDD.ext
Origine: Formulaire automatis√© de gestion des demandes
Secteur de traitement: {secteur}
Horodatage: {datetime.now().strftime('%d/%m/%Y √† %H:%M:%S')}

=== INSTRUCTIONS ZEENDOC ===
Ces documents sont √† classer automatiquement dans le dossier client:
- Nom du dossier: {nom.upper()} {prenom}
- Type de demande: {type_demande}
- Secteur: {secteur}
- R√©f√©rence: {type_demande}_{secteur.replace(' ', '')}_{nom.upper()}_{prenom}_{datetime.now().strftime('%Y%m%d')}

Merci de confirmer la r√©ception et le classement.
"""
    
    return corps

def generer_corps_email(data, adresse_zeendoc):
    """G√©n√®re le contenu format√© de l'email principal - demandes standard"""
    
    type_demande = data.get('type', 'Non sp√©cifi√©').upper()
    secteur = data.get('secteurDemandeur', 'Non sp√©cifi√©')
    
    corps = f"""=== DEMANDE DE {type_demande} ===
Date: {data.get('dateDemande', 'Non sp√©cifi√©e')}
Client: {data.get('nom', '')} {data.get('prenom', '')}
Secteur: {secteur}
Nouveau client: {data.get('nouveauClient', 'Non sp√©cifi√©')}
Urgence: {data.get('urgence', 'Normal')}
Origine: {data.get('origine', 'Non sp√©cifi√©e')}
Mode signature: {data.get('modeSignature', 'Non sp√©cifi√©')}
Prochain RDV: {data.get('dateRdv', 'Non programm√©')}

"""

    # Informations sp√©cifiques selon le type
    if data.get('type') == 'versement':
        corps += f"""=== INFORMATIONS FINANCI√àRES ===
Type de versement: {data.get('typeVersement', 'Non sp√©cifi√©')}
Montant: {data.get('montantVersement', 'Non sp√©cifi√©')} ‚Ç¨
Allocation: {data.get('allocationVersement', 'Non sp√©cifi√©e')}
Frais: {data.get('fraisVersement', 'Non sp√©cifi√©s')}%

=== PROVENANCE ET TRA√áABILIT√â ===
Provenance: {data.get('provenanceFonds', 'Non sp√©cifi√©e')}
Chemin: {data.get('cheminArgent', 'Non sp√©cifi√©')}
Justificatif transit: {data.get('justifCompteTransit', 'Non sp√©cifi√©')}

=== B√âN√âFICIAIRES ===
Type clause: {data.get('clauseBeneficiaireType', 'Non sp√©cifi√©')}
Sp√©cification: {data.get('clauseBeneficiaireSpec', 'Non sp√©cifi√©e')}

"""

    elif data.get('type') == 'rachat':
        corps += f"""=== INFORMATIONS FINANCI√àRES ===
Type de rachat: {data.get('typeRachat', 'Non sp√©cifi√©')}
Montant: {data.get('montantRachat', 'Non sp√©cifi√©')} ‚Ç¨
Fiscalit√©: {data.get('fiscaliteRachat', 'Non sp√©cifi√©e')}
Motif: {data.get('motifRachat', 'Non sp√©cifi√©')}

=== SUPPORTS ET R√âALLOCATION ===
Support √† d√©sinvestir: {data.get('supportDesinvestir', 'Non sp√©cifi√©')}
Pourcentage √† r√©alouer: {data.get('pourcentageReallouer', 'Non sp√©cifi√©')}%
Nouveau support: {data.get('nouveauSupport', 'Non sp√©cifi√©')}

"""

    elif data.get('type') == 'arbitrage':
        corps += f"""=== ALLOCATION FINANCI√àRE ===
Montant: {data.get('allocationArbitrage', 'Non sp√©cifi√©')} ‚Ç¨

"""

    corps += f"""

=== DOCUMENTS JOINTS ===
üìé Les pi√®ces justificatives ont √©t√© envoy√©es automatiquement vers ZeenDoc
üìß Adresse de d√©p√¥t ({secteur}): {adresse_zeendoc}
üìÅ R√©f√©rence dossier: {data.get('type', '').upper()}_{secteur.replace(' ', '')}_{data.get('nom', '').upper()}_{data.get('prenom', '')}_{datetime.now().strftime('%Y%m%d')}

---
Demande g√©n√©r√©e et envoy√©e automatiquement le {datetime.now().strftime('%d/%m/%Y √† %H:%M')}
Demandeur: {data.get('demandeur', 'Non sp√©cifi√©')}
Secteur: {secteur}
"""
    
    return corps

# ===== FONCTIONS POUR LES DEMANDES D'ING√âNIERIE (avec multi-secteurs) =====

def preparer_fichiers_email_principal(files):
    """Pr√©pare les fichiers pour l'email principal avec noms standardis√©s - CORRIG√âE"""
    
    fichiers_pieces = []
    
    print("üîß Pr√©paration fichiers pour email principal avec noms standardis√©s...")
    
    for key in files.keys():
        files_list = files.getlist(key)
        print(f"üìÅ Traitement cl√© '{key}': {len(files_list)} fichier(s)")
        
        for file in files_list:
            if file and file.filename and file.filename.strip():
                try:
                    print(f"  üìÑ Traitement fichier: {file.filename}")
                    
                    # Lire le contenu du fichier
                    file_content = file.read()
                    file.seek(0)  # Remettre le curseur au d√©but
                    
                    if len(file_content) == 0:
                        print(f"  ‚ö†Ô∏è Fichier vide ignor√©: {file.filename}")
                        continue
                    
                    # CORRECTION : G√©n√©rer un nom standardis√© m√™me pour l'email principal
                    # Il faut r√©cup√©rer les infos depuis les donn√©es du formulaire
                    # On va cr√©er une version simplifi√©e du nom standardis√©
                    
                    # Extraire l'extension
                    extension = ""
                    if '.' in file.filename:
                        extension = file.filename.split('.')[-1].lower()
                    
                    # Mapper les IDs vers des noms courts
                    mapping_docs = {
                        'ficheRenseignement': 'Fiche_Renseignement',
                        'avisImposition': 'Avis_Imposition',
                        'bulletinsSalaire': 'Bulletins_Salaire',
                        'infosRetraite': 'Infos_Retraite',
                        'relevesPlacement': 'Releves_Placement',
                        'profilRisques': 'Profil_Risques',
                        'cniLivret': 'CNI_Livret',
                        'tableauAmortissement': 'Tableau_Amortissement',
                        'autresDocuments': 'Autres_Documents'
                    }
                    
                    doc_type = mapping_docs.get(key, 'Document')
                    date_str = datetime.now().strftime('%Y%m%d')
                    
                    # Nom standardis√© pour email principal (plus simple que ZeenDoc)
                    nom_standardise = f"EMAIL_{doc_type}_{date_str}"
                    if extension:
                        nom_standardise += f".{extension}"
                    
                    print(f"  üè∑Ô∏è Nom standardis√© email principal: {nom_standardise}")
                    
                    fichiers_pieces.append({
                        'nom': nom_standardise,  # ‚Üê CORRECTION : Utiliser le nom standardis√©
                        'nom_original': file.filename,
                        'contenu': file_content,
                        'type_mime': file.content_type or 'application/octet-stream',
                        'taille': len(file_content),
                        'categorie': obtenir_categorie_document_ingenierie(key)
                    })
                    
                    print(f"  ‚úÖ Fichier ajout√©: {nom_standardise} ({len(file_content)} bytes)")
                    
                except Exception as e:
                    print(f"  ‚ùå Erreur pr√©paration fichier email principal {file.filename}: {str(e)}")
                    continue
            else:
                print(f"  ‚ö†Ô∏è Fichier vide ou sans nom pour la cl√© '{key}'")
    
    print(f"üìä Total fichiers pr√©par√©s pour email principal: {len(fichiers_pieces)}")
    return fichiers_pieces

def preparer_fichiers_zeendoc_ingenierie(files, nom, prenom, conseiller, secteur):
    """Pr√©pare les fichiers pour l'envoi vers ZeenDoc - version ing√©nierie"""
    
    fichiers_pieces = []
    
    for key, file in files.items():
        if file and file.filename:
            try:
                # Lire le contenu du fichier
                file_content = file.read()
                file.seek(0)  # Remettre le curseur au d√©but
                
                # G√©n√©rer un nom de fichier standardis√© pour ing√©nierie
                nom_standardise = generer_nom_fichier_zeendoc_ingenierie(
                    file.filename, 
                    nom, 
                    prenom, 
                    conseiller,
                    secteur,
                    key
                )
                
                fichiers_pieces.append({
                    'nom': nom_standardise,
                    'nom_original': file.filename,
                    'contenu': file_content,
                    'type_mime': file.content_type or 'application/octet-stream',
                    'taille': len(file_content),
                    'categorie': obtenir_categorie_document_ingenierie(key)
                })
                
            except Exception as e:
                print(f"Erreur pr√©paration fichier ing√©nierie {file.filename}: {str(e)}")
                continue
    
    return fichiers_pieces

def generer_nom_fichier_zeendoc_ingenierie(nom_fichier, nom, prenom, conseiller, secteur, doc_id):
    """G√©n√®re un nom de fichier standardis√© pour ZeenDoc - version ing√©nierie"""
    
    # Extraire l'extension
    extension = ""
    if '.' in nom_fichier:
        extension = nom_fichier.split('.')[-1].lower()
    
    # Mapper les IDs de documents vers des noms courts
    mapping_docs = {
        'ficheRenseignement': 'Fiche_Renseignement',
        'avisImposition': 'Avis_Imposition',
        'bulletinsSalaire': 'Bulletins_Salaire',
        'infosRetraite': 'Infos_Retraite',
        'relevesPlacement': 'Releves_Placement',
        'profilRisques': 'Profil_Risques',
        'cniLivret': 'CNI_Livret',
        'tableauAmortissement': 'Tableau_Amortissement',
        'autresDocuments': 'Autres_Documents'
    }
    
    doc_type = mapping_docs.get(doc_id, 'Document')
    
    # Format: INGENIERIE_NOM_Prenom_TypeDocument_Conseiller_Secteur_YYYYMMDD.ext
    date_str = datetime.now().strftime('%Y%m%d')
    conseiller_clean = conseiller.replace(' ', '_')
    secteur_clean = secteur.replace(' ', '_')
    nom_final = f"INGENIERIE_{nom.upper()}_{prenom}_{doc_type}_{conseiller_clean}_{secteur_clean}_{date_str}"
    
    if extension:
        nom_final += f".{extension}"
    
    return nom_final

def obtenir_categorie_document_ingenierie(doc_id):
    """Retourne la cat√©gorie du document pour ZeenDoc - version ing√©nierie"""
    
    categories = {
        'ficheRenseignement': 'Profil Client',
        'avisImposition': 'Fiscalite',
        'bulletinsSalaire': 'Revenus',
        'infosRetraite': 'Retraite',
        'relevesPlacement': 'Placements',
        'profilRisques': 'Profil Client',
        'cniLivret': 'Identite',
        'tableauAmortissement': 'Credits',
        'autresDocuments': 'Autres'
    }
    
    return categories.get(doc_id, 'General')

def generer_corps_zeendoc_ingenierie(data, fichiers_pieces, adresse_zeendoc):
    """G√©n√®re le corps de l'email pour ZeenDoc - version ing√©nierie"""
    
    nom_conseiller = data.get('nomConseiller', 'Non specifie')
    secteur_conseiller = data.get('secteurConseiller', 'Non specifie')
    contact1_nom = data.get('nomContact1', '')
    contact1_prenom = data.get('prenomContact1', '')
    contact2_nom = data.get('nomContact2', '')
    contact2_prenom = data.get('prenomContact2', '')
    date_demande = data.get('dateDemande', datetime.now().strftime('%d/%m/%Y'))
    
    # Construire le nom du client
    client_principal = f"{contact1_nom} {contact1_prenom}"
    if contact2_nom and contact2_prenom:
        client_principal += f" & {contact2_nom} {contact2_prenom}"
    
    corps = f"""=== DEPOT AUTOMATIQUE ZEENDOC - INGENIERIE ===
Type: Demande d'ingenierie patrimoniale
Client(s): {client_principal}
Conseiller: {nom_conseiller} ({secteur_conseiller})
Date: {date_demande}
Adresse de depot: {adresse_zeendoc}
Nombre de pieces: {len(fichiers_pieces)}

=== CLASSIFICATION DES DOCUMENTS ===
"""

    # Grouper par cat√©gorie
    par_categorie = {}
    for fichier in fichiers_pieces:
        cat = fichier['categorie']
        if cat not in par_categorie:
            par_categorie[cat] = []
        par_categorie[cat].append(fichier)
    
    for categorie, fichiers in par_categorie.items():
        corps += f"\nüìÅ {categorie.upper()}:\n"
        for fichier in fichiers:
            taille_fmt = format_file_size(fichier['taille'])
            corps += f"  ‚Ä¢ {fichier['nom']} ({taille_fmt})\n"
    
    corps += f"""

=== INFORMATIONS TECHNIQUES ===
Format de nommage: INGENIERIE_NOM_Prenom_TypeDoc_Conseiller_Secteur_YYYYMMDD.ext
Origine: Formulaire automatise de demande d'ingenierie
Secteur de traitement: {secteur_conseiller}
Horodatage: {datetime.now().strftime('%d/%m/%Y a %H:%M:%S')}

=== INSTRUCTIONS ZEENDOC ===
Ces documents sont a classer automatiquement dans le dossier client:
- Nom du dossier: {client_principal}
- Type de demande: INGENIERIE PATRIMONIALE
- Secteur: {secteur_conseiller}
- Reference: INGENIERIE_{secteur_conseiller.replace(' ', '')}_{contact1_nom.upper()}_{contact1_prenom}_{datetime.now().strftime('%Y%m%d')}
- Conseiller responsable: {nom_conseiller} ({secteur_conseiller})

Merci de confirmer la reception et le classement.
"""
    
    return corps

def generer_corps_email_ingenierie(data, adresse_zeendoc=None):
    """G√©n√®re le contenu format√© de l'email principal - version ing√©nierie"""
    
    nom_conseiller = data.get('nomConseiller', 'Non specifie')
    secteur_conseiller = data.get('secteurConseiller', 'Non specifie')
    contact1_nom = data.get('nomContact1', '')
    contact1_prenom = data.get('prenomContact1', '')
    contact2_nom = data.get('nomContact2', '')
    contact2_prenom = data.get('prenomContact2', '')
    
    # Construire le nom du client
    client_principal = f"{contact1_nom} {contact1_prenom}"
    if contact2_nom and contact2_prenom:
        client_principal += f" & {contact2_nom} {contact2_prenom}"
    
    corps = f"""=== DEMANDE D'INGENIERIE PATRIMONIALE ===
Date: {data.get('dateDemande', 'Non specifiee')}
Conseiller: {nom_conseiller} ({secteur_conseiller})
Client(s): {client_principal}
Typologie: {data.get('typologieContact', 'Non specifie')}
Urgence: {data.get('urgence', 'Normal')}
Origine du contact: {data.get('origineContact', 'Non specifiee')}
Prochain RDV: {data.get('dateRdv', 'Non programme')}

=== SITUATION FAMILIALE ===
Situation: {data.get('situationFamiliale', 'Non specifiee')}
Regime matrimonial: {data.get('regimeMatrimonial', 'Non specifie')}

"""

    # Objectifs patrimoniaux
    objectifs_communs = data.get('objectifs_communs', 'true') == 'true'
    
    if objectifs_communs:
        objectifs_data = data.get('objectifs_selected', '[]')
        try:
            import json
            objectifs = json.loads(objectifs_data)
            corps += "=== OBJECTIFS PATRIMONIAUX (COMMUNS) ===\n"
            for obj in objectifs:
                corps += f"- {obj}\n"
        except:
            corps += "=== OBJECTIFS PATRIMONIAUX ===\nNon specifies\n"
    else:
        try:
            import json
            objectifs1_data = data.get('objectifs_contact1', '[]')
            objectifs2_data = data.get('objectifs_contact2', '[]')
            objectifs1 = json.loads(objectifs1_data)
            objectifs2 = json.loads(objectifs2_data)
            
            corps += f"=== OBJECTIFS PATRIMONIAUX - {contact1_prenom} {contact1_nom} ===\n"
            for obj in objectifs1:
                corps += f"- {obj}\n"
            
            if contact2_nom and contact2_prenom:
                corps += f"\n=== OBJECTIFS PATRIMONIAUX - {contact2_prenom} {contact2_nom} ===\n"
                for obj in objectifs2:
                    corps += f"- {obj}\n"
        except:
            corps += "=== OBJECTIFS PATRIMONIAUX ===\nNon specifies\n"
    
    # Types de demande
    try:
        import json
        types_demande_data = data.get('types_demande_selected', '[]')
        types_demande = json.loads(types_demande_data)
        corps += "\n=== TYPES DE DEMANDE ===\n"
        for type_dem in types_demande:
            corps += f"- {type_dem}\n"
            
        # Pr√©cision pour "Autre"
        if 'Autre' in types_demande and data.get('autreDemandePrecision'):
            corps += f"Precision: {data.get('autreDemandePrecision')}\n"
    except:
        corps += "\n=== TYPES DE DEMANDE ===\nNon specifies\n"
    
    # Pr√©cisions sur la demande
    if data.get('precisionsDemande'):
        corps += f"""
=== PRECISIONS SUR LA DEMANDE ===
{data.get('precisionsDemande')}
"""
    
    # Section documents joints adapt√©e selon si ZeenDoc est activ√©
    if adresse_zeendoc:
        corps += f"""

=== DOCUMENTS JOINTS ===
üìé Les pieces justificatives ont ete envoyees automatiquement vers ZeenDoc
üìß Adresse de depot ({secteur_conseiller}): {adresse_zeendoc}
üìÅ Reference dossier: INGENIERIE_{secteur_conseiller.replace(' ', '')}_{contact1_nom.upper()}_{contact1_prenom}_{datetime.now().strftime('%Y%m%d')}
"""
    else:
        corps += f"""

=== DOCUMENTS JOINTS ===
üìé Les pieces justificatives sont jointes a cet email uniquement
‚ö†Ô∏è  Envoi vers ZeenDoc desactive par le demandeur
üìÅ Reference dossier: INGENIERIE_{secteur_conseiller.replace(' ', '')}_{contact1_nom.upper()}_{contact1_prenom}_{datetime.now().strftime('%Y%m%d')}
"""
    
    corps += f"""
---
Demande generee et envoyee automatiquement le {datetime.now().strftime('%d/%m/%Y a %H:%M')}
Conseiller: {nom_conseiller} ({secteur_conseiller})
"""
    
    return corps

def format_file_size(bytes_size):
    """Formate la taille des fichiers de mani√®re lisible"""
    
    if bytes_size == 0:
        return "0 B"
    
    size_names = ["B", "KB", "MB", "GB", "TB"]
    import math
    i = int(math.floor(math.log(bytes_size, 1024)))
    p = math.pow(1024, i)
    s = round(bytes_size / p, 2)
    return f"{s} {size_names[i]}"

if __name__ == '__main__':
    # En production sur Render, utiliser le port fourni par la plateforme
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=False)
